const bcrypt = require('bcrypt');
const UsuarioRepository = require('../repository/usuarioRepository');
const StatusService = require('../services/statusService');
const Usuario = require('../models/usuario');
const emailService = require('../services/emailService');

const usuarioRepository = new UsuarioRepository();
const statusService = new StatusService();
const SALT_ROUNDS = 10;

class UsuarioController {
  async listarTodos(req, res) {
    try {
      console.log('üîç [DEBUG] Iniciando listarTodos...');
      const usuarios = await usuarioRepository.getAllWithStatusDetails();
      console.log('üîç [DEBUG] Usu√°rios retornados:', usuarios.length);

      if (usuarios.length > 0) {
        const firstUser = usuarios[0];
        console.log('üîç [DEBUG] Primeiro usu√°rio tipo:', typeof firstUser);
        console.log('üîç [DEBUG] Primeiro usu√°rio constructor:', firstUser.constructor.name);
        console.log('üîç [DEBUG] Primeiro usu√°rio tem toJSON:', typeof firstUser.toJSON);
        console.log('üîç [DEBUG] Primeiro usu√°rio keys:', Object.keys(firstUser));
      }

      const mappedData = usuarios.map((u, index) => {
        console.log(`üîç [DEBUG] Processando usu√°rio ${index}: tipo=${typeof u}, constructor=${u.constructor.name}, hasToJSON=${typeof u.toJSON}`);

        // Safeguard: Check if u has toJSON method, if not create a safe object
        if (typeof u.toJSON === 'function') {
          console.log(`üîç [DEBUG] Usu√°rio ${index} tem toJSON, usando m√©todo normal`);
          return {
            ...u.toJSON(),
            aprovado_por_nome: u.aprovado_por_nome,
            bloqueado_por_nome: u.bloqueado_por_nome,
            suspenso_por_nome: u.suspenso_por_nome
          };
        } else {
          // Fallback: Create a safe object without toJSON
          console.warn(`üîç [DEBUG] Usu√°rio ${index} SEM toJSON, usando fallback:`, u);
          return {
            id: u.id,
            nome: u.nome,
            email: u.email,
            tipo: u.tipo,
            status: u.status,
            ativo: u.ativo,
            data_cadastro: u.data_cadastro,
            data_atualizacao: u.data_atualizacao,
            data_aprovacao: u.data_aprovacao,
            aprovado_por: u.aprovado_por,
            data_ativacao: u.data_ativacao,
            data_ultimo_acesso: u.data_ultimo_acesso,
            data_bloqueio: u.data_bloqueio,
            motivo_bloqueio: u.motivo_bloqueio,
            bloqueado_por: u.bloqueado_por,
            data_suspensao: u.data_suspensao,
            data_fim_suspensao: u.data_fim_suspensao,
            suspenso_por: u.suspenso_por,
            motivo_suspensao: u.motivo_suspensao,
            aprovado_por_nome: u.aprovado_por_nome,
            bloqueado_por_nome: u.bloqueado_por_nome,
            suspenso_por_nome: u.suspenso_por_nome
          };
        }
      });

      console.log('üîç [DEBUG] Dados mapeados com sucesso, enviando resposta...');

      res.json({
        success: true,
        data: mappedData
      });
    } catch (error) {
      console.error('Erro ao listar usu√°rios:', error);
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao buscar usu√°rios']
      });
    }
  }

  async criar(req, res) {
    try {
      const { nome, email, senha, tipo } = req.body;

      // Valida√ß√µes b√°sicas
      const errors = [];

      if (!nome?.trim()) errors.push('Nome √© obrigat√≥rio');
      if (!email?.trim()) errors.push('Email √© obrigat√≥rio');
      if (!tipo?.trim()) errors.push('Tipo √© obrigat√≥rio');

      // Senha √© opcional - se fornecida, validar
      if (senha && senha.trim() && senha.length < 6) {
        errors.push('Senha deve ter pelo menos 6 caracteres');
      }

      if (!/\S+@\S+\.\S+/.test(email || '')) {
        errors.push('Email inv√°lido');
      }

      if (tipo && !['Administrador', 'Financeiro', 'Colaborador'].includes(tipo)) {
        errors.push('Tipo de usu√°rio inv√°lido. Use: Administrador, Financeiro ou Colaborador');
      }

      if (errors.length > 0) {
        return res.status(400).json({
          success: false,
          message: 'Dados inv√°lidos',
          errors
        });
      }

      // Verificar se email j√° existe para usu√°rios ativos
      const emailExisteAtivo = await usuarioRepository.emailExistsActive(email);

      if (emailExisteAtivo) {
        return res.status(400).json({
          success: false,
          message: 'Email j√° est√° em uso',
          errors: ['Este email j√° est√° cadastrado']
        });
      }

      // Verificar se email pertence a usu√°rio inativo
      const usuarioInativo = await usuarioRepository.findInactiveUserByEmail(email);

      if (usuarioInativo) {
        return res.status(409).json({
          success: false,
          message: 'Email pertence a um usu√°rio inativo',
          errors: ['Este email est√° associado a um usu√°rio inativo'],
          data: {
            canReactivate: true,
            inactiveUserId: usuarioInativo.id,
            inactiveUserName: usuarioInativo.nome,
            inactiveUserEmail: usuarioInativo.email,
            inactiveUserType: usuarioInativo.tipo
          }
        });
      }

      // FLUXO A: Admin forneceu senha - criar usu√°rio ativo
      if (senha && senha.trim()) {
        const senhaHash = await bcrypt.hash(senha, SALT_ROUNDS);

        const novoUsuario = new Usuario({
          nome: nome.trim(),
          email: email.trim().toLowerCase(),
          senha: senhaHash,
          tipo: tipo || 'Colaborador',
          status: 'ativo' // Admin criou com senha = ativo imediatamente
        });

        const usuarioCriado = await usuarioRepository.create(novoUsuario);

        // Enviar email informativo ao usu√°rio
        try {
          await emailService.sendAccountCreatedEmail(
            usuarioCriado.email,
            usuarioCriado.nome,
            usuarioCriado.tipo
          );
        } catch (emailError) {
          console.error('Erro ao enviar email informativo:', emailError);
          // N√£o falhar se email n√£o for enviado
        }

        return res.status(201).json({
          success: true,
          message: 'Usu√°rio cadastrado com sucesso. Voc√™ deve comunicar a senha ao usu√°rio.',
          data: usuarioCriado.toJSON()
        });
      }

      // FLUXO B: Admin N√ÉO forneceu senha - usu√°rio define sua senha
      const crypto = require('crypto');
      const tokenAtivacao = crypto.randomUUID();

      console.log('üîë [DEBUG] Token gerado:', tokenAtivacao);
      console.log('üë§ [DEBUG] Admin que est√° criando:', req.user.id, req.user.nome);

      const novoUsuario = new Usuario({
        nome: nome.trim(),
        email: email.trim().toLowerCase(),
        senha: null, // Usu√°rio definir√° sua senha
        tipo: tipo || 'Colaborador',
        status: 'aprovado', // Aprovado pelo admin, aguardando ativa√ß√£o
        token_ativacao: tokenAtivacao,
        aprovado_por: req.user.id, // ID do admin que est√° criando
        data_aprovacao: new Date()
      });

      console.log('üìù [DEBUG] Dados do novo usu√°rio:', {
        nome: novoUsuario.nome,
        email: novoUsuario.email,
        status: novoUsuario.status,
        token_ativacao: novoUsuario.token_ativacao,
        aprovado_por: novoUsuario.aprovado_por
      });

      const usuarioCriado = await usuarioRepository.create(novoUsuario);

      console.log('‚úÖ [DEBUG] Usu√°rio criado com ID:', usuarioCriado.id);
      console.log('üîç [DEBUG] Token no usu√°rio criado:', usuarioCriado.token_ativacao);

      // Enviar email com link de ativa√ß√£o
      try {
        await emailService.sendApprovalEmail(
          usuarioCriado.email,
          usuarioCriado.nome,
          tokenAtivacao
        );

        return res.status(201).json({
          success: true,
          message: 'Usu√°rio cadastrado com sucesso. Um email foi enviado para que ele defina sua senha.',
          data: usuarioCriado.toJSON()
        });
      } catch (emailError) {
        console.error('Erro ao enviar email de ativa√ß√£o:', emailError);

        // Em desenvolvimento, retornar link
        if (process.env.NODE_ENV !== 'production') {
          return res.status(201).json({
            success: true,
            message: 'Usu√°rio cadastrado. Email n√£o enviado (modo dev).',
            data: usuarioCriado.toJSON(),
            dev_activation_url: `${process.env.FRONTEND_URL || 'http://localhost:5174'}/activate/${tokenAtivacao}`
          });
        }

        // Em produ√ß√£o, falhar se n√£o conseguir enviar email
        return res.status(500).json({
          success: false,
          message: 'Usu√°rio criado, mas falha ao enviar email de ativa√ß√£o',
          errors: ['Erro ao enviar email de ativa√ß√£o']
        });
      }
    } catch (error) {
      console.error('Erro ao criar usu√°rio:', error);
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao criar usu√°rio']
      });
    }
  }

  async atualizar(req, res) {
    try {
      const { id } = req.params;
      const { nome, email, senha, tipo, ativo } = req.body;

      // Verificar se usu√°rio existe
      const usuarioExistente = await usuarioRepository.findById(id);
      if (!usuarioExistente) {
        return res.status(404).json({
          success: false,
          message: 'Usu√°rio n√£o encontrado',
          errors: ['Usu√°rio n√£o existe']
        });
      }

      // Valida√ß√µes
      const errors = [];
      
      if (nome !== undefined && !nome?.trim()) {
        errors.push('Nome n√£o pode estar vazio');
      }
      
      if (email !== undefined) {
        if (!email?.trim()) {
          errors.push('Email n√£o pode estar vazio');
        } else if (!/\S+@\S+\.\S+/.test(email)) {
          errors.push('Email inv√°lido');
        } else {
          // Verificar se email j√° existe (exceto para o pr√≥prio usu√°rio)
          const emailExiste = await usuarioRepository.emailExistsExceptId(email, id);
          if (emailExiste) {
            errors.push('Este email j√° est√° sendo usado por outro usu√°rio');
          }
        }
      }
      
      if (senha !== undefined && senha?.length > 0 && senha.length < 6) {
        errors.push('Senha deve ter pelo menos 6 caracteres');
      }

      if (tipo !== undefined && !['Administrador', 'Financeiro', 'Colaborador'].includes(tipo)) {
        errors.push('Tipo de usu√°rio inv√°lido. Use: Administrador, Financeiro ou Colaborador');
      }

      // Verificar se est√° tentando alterar o pr√≥prio tipo
      if (req.user.id == id && tipo !== undefined && tipo !== req.user.tipo) {
        errors.push('Voc√™ n√£o pode alterar seu pr√≥prio tipo de usu√°rio');
      }

      if (errors.length > 0) {
        return res.status(400).json({
          success: false,
          message: 'Dados inv√°lidos',
          errors
        });
      }

      // Preparar dados para atualiza√ß√£o
      const dadosAtualizacao = {};
      
      if (nome !== undefined) dadosAtualizacao.nome = nome.trim();
      if (email !== undefined) dadosAtualizacao.email = email.trim().toLowerCase();
      if (tipo !== undefined) dadosAtualizacao.tipo = tipo;
      if (ativo !== undefined) dadosAtualizacao.ativo = ativo;
      
      if (senha !== undefined && senha?.length > 0) {
        dadosAtualizacao.senha = await bcrypt.hash(senha, SALT_ROUNDS);
      }

      const usuarioAtualizado = await usuarioRepository.update(id, dadosAtualizacao);

      res.json({
        success: true,
        message: 'Usu√°rio atualizado com sucesso',
        data: usuarioAtualizado.toJSON()
      });
    } catch (error) {
      console.error('Erro ao atualizar usu√°rio:', error);
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao atualizar usu√°rio']
      });
    }
  }

  async excluir(req, res) {
    try {
      const { id } = req.params;

      // Verificar se usu√°rio existe
      const usuario = await usuarioRepository.findById(id);
      if (!usuario) {
        return res.status(404).json({
          success: false,
          message: 'Usu√°rio n√£o encontrado',
          errors: ['Usu√°rio n√£o existe']
        });
      }

      // N√£o permitir excluir a si mesmo
      if (req.user.id == id) {
        return res.status(400).json({
          success: false,
          message: 'Opera√ß√£o n√£o permitida',
          errors: ['Voc√™ n√£o pode excluir sua pr√≥pria conta']
        });
      }

      // Soft delete - define status como 'inativo'
      const linhasAfetadas = await usuarioRepository.softDelete(id, req.user.id);

      if (linhasAfetadas === 0) {
        return res.status(500).json({
          success: false,
          message: 'Erro ao remover usu√°rio',
          errors: ['Falha ao desativar usu√°rio no banco de dados']
        });
      }

      res.json({
        success: true,
        message: 'Usu√°rio removido com sucesso'
      });
    } catch (error) {
      console.error('Erro ao excluir usu√°rio:', error);
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao excluir usu√°rio']
      });
    }
  }

  async buscarPorId(req, res) {
    try {
      const { id } = req.params;
      
      const usuario = await usuarioRepository.findById(id);
      
      if (!usuario) {
        return res.status(404).json({
          success: false,
          message: 'Usu√°rio n√£o encontrado',
          errors: ['Usu√°rio n√£o existe']
        });
      }

      res.json({
        success: true,
        data: usuario.toJSON()
      });
    } catch (error) {
      console.error('Erro ao buscar usu√°rio:', error);
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao buscar usu√°rio']
      });
    }
  }

  async alterarStatus(req, res) {
    try {
      const { id } = req.params;
      const { ativo } = req.body;

      if (typeof ativo !== 'boolean') {
        return res.status(400).json({
          success: false,
          message: 'Status inv√°lido',
          errors: ['Status deve ser true ou false']
        });
      }

      // Verificar se usu√°rio existe
      const usuario = await usuarioRepository.findById(id);
      if (!usuario) {
        return res.status(404).json({
          success: false,
          message: 'Usu√°rio n√£o encontrado',
          errors: ['Usu√°rio n√£o existe']
        });
      }

      // N√£o permitir desativar a si mesmo
      if (req.user.id == id && !ativo) {
        return res.status(400).json({
          success: false,
          message: 'Opera√ß√£o n√£o permitida',
          errors: ['Voc√™ n√£o pode desativar sua pr√≥pria conta']
        });
      }

      await usuarioRepository.updateStatus(id, ativo);

      res.json({
        success: true,
        message: `Usu√°rio ${ativo ? 'ativado' : 'desativado'} com sucesso`
      });
    } catch (error) {
      console.error('Erro ao alterar status:', error);
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao alterar status do usu√°rio']
      });
    }
  }

  // Novos m√©todos para gerenciamento de status

  async approveUser(req, res) {
    try {
      const { id } = req.params;

      // Verificar permiss√£o
      if (!statusService.canPerformAction(req.user, 'aprovar')) {
        return res.status(403).json({
          success: false,
          message: 'Acesso negado',
          errors: ['Voc√™ n√£o tem permiss√£o para aprovar usu√°rios']
        });
      }

      const resultado = await statusService.approveUser(id, req.user.id);

      res.json({
        success: true,
        message: 'Usu√°rio aprovado com sucesso',
        data: resultado
      });
    } catch (error) {
      console.error('Erro ao aprovar usu√°rio:', error);
      res.status(500).json({
        success: false,
        message: error.message || 'Erro interno do servidor',
        errors: [error.message || 'Erro ao aprovar usu√°rio']
      });
    }
  }

  async rejectUser(req, res) {
    try {
      const { id } = req.params;
      const { motivo } = req.body;

      // Verificar permiss√£o
      if (!statusService.canPerformAction(req.user, 'rejeitar')) {
        return res.status(403).json({
          success: false,
          message: 'Acesso negado',
          errors: ['Voc√™ n√£o tem permiss√£o para rejeitar usu√°rios']
        });
      }

      if (!motivo?.trim()) {
        return res.status(400).json({
          success: false,
          message: 'Motivo da rejei√ß√£o √© obrigat√≥rio',
          errors: ['Informe o motivo da rejei√ß√£o']
        });
      }

      const resultado = await statusService.rejectUser(id, req.user.id, motivo);

      res.json({
        success: true,
        message: 'Usu√°rio rejeitado com sucesso',
        data: resultado
      });
    } catch (error) {
      console.error('Erro ao rejeitar usu√°rio:', error);
      res.status(500).json({
        success: false,
        message: error.message || 'Erro interno do servidor',
        errors: [error.message || 'Erro ao rejeitar usu√°rio']
      });
    }
  }

  async blockUser(req, res) {
    try {
      const { id } = req.params;
      const { motivo } = req.body;

      // Verificar permiss√£o
      if (!statusService.canPerformAction(req.user, 'bloquear')) {
        return res.status(403).json({
          success: false,
          message: 'Acesso negado',
          errors: ['Voc√™ n√£o tem permiss√£o para bloquear usu√°rios']
        });
      }

      if (!motivo?.trim()) {
        return res.status(400).json({
          success: false,
          message: 'Motivo do bloqueio √© obrigat√≥rio',
          errors: ['Informe o motivo do bloqueio']
        });
      }

      // N√£o permitir bloquear a si mesmo
      if (req.user.id == id) {
        return res.status(400).json({
          success: false,
          message: 'Opera√ß√£o n√£o permitida',
          errors: ['Voc√™ n√£o pode bloquear sua pr√≥pria conta']
        });
      }

      const resultado = await statusService.blockUser(id, req.user.id, motivo);

      res.json({
        success: true,
        message: 'Usu√°rio bloqueado com sucesso',
        data: resultado
      });
    } catch (error) {
      console.error('Erro ao bloquear usu√°rio:', error);
      res.status(500).json({
        success: false,
        message: error.message || 'Erro interno do servidor',
        errors: [error.message || 'Erro ao bloquear usu√°rio']
      });
    }
  }

  async unblockUser(req, res) {
    try {
      const { id } = req.params;

      // Verificar permiss√£o
      if (!statusService.canPerformAction(req.user, 'desbloquear')) {
        return res.status(403).json({
          success: false,
          message: 'Acesso negado',
          errors: ['Voc√™ n√£o tem permiss√£o para desbloquear usu√°rios']
        });
      }

      const resultado = await statusService.unblockUser(id, req.user.id);

      res.json({
        success: true,
        message: 'Usu√°rio desbloqueado com sucesso',
        data: resultado
      });
    } catch (error) {
      console.error('Erro ao desbloquear usu√°rio:', error);
      res.status(500).json({
        success: false,
        message: error.message || 'Erro interno do servidor',
        errors: [error.message || 'Erro ao desbloquear usu√°rio']
      });
    }
  }

  async suspendUser(req, res) {
    try {
      const { id } = req.params;
      const { dataFim, motivo } = req.body;

      // Verificar permiss√£o
      if (!statusService.canPerformAction(req.user, 'suspender')) {
        return res.status(403).json({
          success: false,
          message: 'Acesso negado',
          errors: ['Voc√™ n√£o tem permiss√£o para suspender usu√°rios']
        });
      }

      const errors = [];
      if (!dataFim) errors.push('Data fim da suspens√£o √© obrigat√≥ria');
      if (!motivo?.trim()) errors.push('Motivo da suspens√£o √© obrigat√≥rio');

      if (errors.length > 0) {
        return res.status(400).json({
          success: false,
          message: 'Dados inv√°lidos',
          errors
        });
      }

      // N√£o permitir suspender a si mesmo
      if (req.user.id == id) {
        return res.status(400).json({
          success: false,
          message: 'Opera√ß√£o n√£o permitida',
          errors: ['Voc√™ n√£o pode suspender sua pr√≥pria conta']
        });
      }

      const resultado = await statusService.suspendUser(id, req.user.id, dataFim, motivo);

      res.json({
        success: true,
        message: 'Usu√°rio suspenso com sucesso',
        data: resultado
      });
    } catch (error) {
      console.error('Erro ao suspender usu√°rio:', error);
      res.status(500).json({
        success: false,
        message: error.message || 'Erro interno do servidor',
        errors: [error.message || 'Erro ao suspender usu√°rio']
      });
    }
  }

  async reactivateUser(req, res) {
    try {
      const { id } = req.params;

      // Verificar permiss√£o
      if (!statusService.canPerformAction(req.user, 'reativar')) {
        return res.status(403).json({
          success: false,
          message: 'Acesso negado',
          errors: ['Voc√™ n√£o tem permiss√£o para reativar usu√°rios']
        });
      }

      const usuario = await usuarioRepository.findById(id);
      if (!usuario) {
        return res.status(404).json({
          success: false,
          message: 'Usu√°rio n√£o encontrado',
          errors: ['Usu√°rio n√£o existe']
        });
      }

      let resultado;
      if (usuario.status === 'suspenso') {
        resultado = await statusService.reactivateSuspendedUser(id, req.user.id);
      } else if (usuario.status === 'inativo') {
        resultado = await statusService.reactivateInactiveUser(id, req.user.id);
      } else {
        return res.status(400).json({
          success: false,
          message: `N√£o √© poss√≠vel reativar usu√°rio com status ${usuario.status}`,
          errors: [`Usu√°rio deve estar suspenso ou inativo para ser reativado`]
        });
      }

      res.json({
        success: true,
        message: 'Usu√°rio reativado com sucesso',
        data: resultado
      });
    } catch (error) {
      console.error('Erro ao reativar usu√°rio:', error);
      res.status(500).json({
        success: false,
        message: error.message || 'Erro interno do servidor',
        errors: [error.message || 'Erro ao reativar usu√°rio']
      });
    }
  }

  async reactivateAndUpdate(req, res) {
    try {
      const { id } = req.params;
      const { nome, tipo } = req.body;

      // Verificar permiss√£o
      if (!statusService.canPerformAction(req.user, 'reativar')) {
        return res.status(403).json({
          success: false,
          message: 'Acesso negado',
          errors: ['Voc√™ n√£o tem permiss√£o para reativar usu√°rios']
        });
      }

      // Verificar se usu√°rio existe e est√° inativo
      const usuario = await usuarioRepository.findById(id);
      if (!usuario) {
        return res.status(404).json({
          success: false,
          message: 'Usu√°rio n√£o encontrado',
          errors: ['Usu√°rio n√£o existe']
        });
      }

      if (usuario.status !== 'inativo') {
        return res.status(400).json({
          success: false,
          message: 'Usu√°rio n√£o est√° inativo',
          errors: ['Apenas usu√°rios inativos podem ser reativados com atualiza√ß√£o']
        });
      }

      // Reativar usu√°rio
      await statusService.reactivateInactiveUser(id, req.user.id);

      // Atualizar dados do usu√°rio se fornecidos
      const updateData = {};
      if (nome && nome.trim()) updateData.nome = nome.trim();
      if (tipo && tipo.trim()) updateData.tipo = tipo.trim();

      if (Object.keys(updateData).length > 0) {
        await usuarioRepository.update(id, updateData);
      }

      // Gerar token de ativa√ß√£o e definir status como aprovado
      const crypto = require('crypto');
      const tokenAtivacao = crypto.randomUUID();

      await usuarioRepository.updateApprovalStatus(
        id,
        'aprovado',
        tokenAtivacao,
        req.user.id
      );

      // Enviar email de ativa√ß√£o
      const usuarioAtualizado = await usuarioRepository.findById(id);
      await emailService.sendApprovalEmail(
        usuarioAtualizado.email,
        usuarioAtualizado.nome,
        tokenAtivacao
      );

      res.json({
        success: true,
        message: 'Usu√°rio reativado com sucesso. Email de ativa√ß√£o enviado.',
        data: usuarioAtualizado.toJSON()
      });
    } catch (error) {
      console.error('Erro ao reativar e atualizar usu√°rio:', error);
      res.status(500).json({
        success: false,
        message: error.message || 'Erro interno do servidor',
        errors: [error.message || 'Erro ao reativar usu√°rio']
      });
    }
  }

  async getUserStatusHistory(req, res) {
    try {
      const { id } = req.params;
      const { limit = 10 } = req.query;

      const historico = await statusService.getUserStatusHistory(id, parseInt(limit));

      res.json({
        success: true,
        data: historico
      });
    } catch (error) {
      console.error('Erro ao buscar hist√≥rico:', error);
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao buscar hist√≥rico de status']
      });
    }
  }

  async getStatusStatistics(req, res) {
    try {
      const estatisticas = await statusService.getStatusStatistics();

      res.json({
        success: true,
        data: estatisticas
      });
    } catch (error) {
      console.error('Erro ao buscar estat√≠sticas:', error);
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao buscar estat√≠sticas de status']
      });
    }
  }
}

module.exports = new UsuarioController();